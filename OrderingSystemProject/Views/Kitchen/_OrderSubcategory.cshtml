@using OrderingSystemProject.Models.Kitchen
@model OrderingSystemProject.Models.Kitchen.OrderSubCatViewModel

@if (Model.Subcat.Count > 0)
{
	<div class="KitchenOrderSubcategory">
		<div class="KitchenCategoryLine"> 
			<div class="KitchenOrderSubcategoryLabel">@(Model.CatName):</div>
			@{
				switch (Model.CatStatus)
				{
					case OrderItemStatus.NewItem:
						{
							<a class="KitchenCatActionButton KitchenOrdrButtonTake" href="/Kitchen/TakeCat/@Model.Order.OrderId/@((int)Model.CatType)">
								<div class="KitchenCatButtonText">Take</div>
							</a>
							break;
						}
					case OrderItemStatus.Preparing:
						{
							<a class="KitchenCatActionButton KitchenOrdrButtonFinish" href="/Kitchen/FinishCat/@Model.Order.OrderId/@((int)Model.CatType)">
								<div class="KitchenCatButtonText">Finish</div>
							</a>
							break;
						}
					case OrderItemStatus.Ready:
						{
							<a class="KitchenCatActionButton KitchenOrdrButtonReturn" href="/Kitchen/ReturnCat/@Model.Order.OrderId/@((int)Model.CatType)">
								<div class="KitchenCatButtonText">Return</div>
							</a>
							break;
						}
				}
			}
		</div>	
		<div class="KitchenOrderItemBreak"></div>

		@foreach (var item in Model.Subcat) // Go throu list of order_itmes of current order
		{
			<partial name="~/Views/Kitchen/_OrderItem.cshtml" model="@(new OrderItemVieModel(item, Model.Order))" />

			@if (item != Model.Subcat[Model.Subcat.Count - 1]) // if this item is not the last, add item break;
			{
				<div class="KitchenOrderItemBreakDotted"></div>
			}
		}
	</div>
}