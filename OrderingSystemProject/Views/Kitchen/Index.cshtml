@model OrderingSystemProject.Models.Kitchen.KitchenViewModel

@{
	ViewData["Title"] = "Kitchen";
}

<h1>Orders List</h1>

<partial name="_ErrorMessage" />

<div>
	<a class="btn btn-primary" asp-action="Index" asp-controller="Kitchen">Refresh</a>
	<a class="btn btn-primary" asp-action="Done" asp-controller="Kitchen">Done Orders</a>
</div>
<div>Last Update: @Model.LastUpdate.ToString("HH:mm:ss")</div>

<div class="KitchenOrdersList">
	@{
		if (Model != null)
		{
			foreach (var order in Model.Orders) // Go throu list of orders
			{
				var _time_since_order = (DateTime.Now - order.OrderTime); // Get the date since order was taken

				<div class="KitchenDivMain">
					@{
						string order_color = "";

						switch (order.KitchenStatus) // Get css class with background color depending on order status
						{
							case OrderStatus.New:
								order_color = "KitchenTopGreen"; break;
							case OrderStatus.Preparing:
								order_color = _time_since_order.Minutes > 10 ? "KitchenTopRed" : "KitchenTopYellow"; break;
							case OrderStatus.ReadyForPickup:
								order_color = "KitchenTopBlue"; break;
							case OrderStatus.Served:
							case OrderStatus.Completed:
								order_color = "KitchenTopGrey"; break;
						}
					}

					<div class="KitchenTopBase @order_color"> 
						<div class="KitchenOrderTop">
							<span class="KitchenOrderTableNumber">tbl @order.Table.TableNumber</span>
							<span class="KitchenOrderOrderTime">@order.OrderTime.ToString("HH:mm:ss")</span>
						</div>
						<div class="KitchenOrderTop">
							@{
								switch(order.KitchenStatus){
									case OrderStatus.New:
										<a class="KitchenOrderButton KitchenOrdrButtonTake" href="/Kitchen/TakeFullOrder/@order.OrderId">
											<span class="KitchenOrderButtonText">Take</span>
										</a>
										break;
									case OrderStatus.Preparing:
										<a class="KitchenOrderButton KitchenOrdrButtonFinish" href="/Kitchen/FinishFullOrder/@order.OrderId">
											<span class="KitchenOrderButtonText">Finish</span>
										</a>
										break;
									default:
										<span></span>
										break;
								}
							}
							<span class="KitchenOrderTimePassed">+@((DateTime.Now - order.OrderTime).ToString(@"hh\:mm\:ss"))</span>
						</div>
					</div>

					@{
						foreach (var item in order.Items) // Go throu list of order_itmes of current order
						{
							<div class="KitchenDiv">
								<div class="KitchenItemText">
									@{
										string _ord_item_color = "";

										switch (item.ItemStatus) // Get css color class depending on current item status
										{
											case OrderItemStatus.NewItem:
												_ord_item_color = "KitchenTopGreen"; break;
											case OrderItemStatus.Preparing:
												_ord_item_color = _time_since_order.Minutes > 10 ? "KitchenTopRed" : "KitchenTopYellow"; break;
											case OrderItemStatus.Ready:
												_ord_item_color = "KitchenTopBlue"; break;
											case OrderItemStatus.Served:
												_ord_item_color = "KitchenTopGrey"; break;
										}
									}
									<div class="KitchenOrderItemColor @_ord_item_color"></div>
									<span class="KitchenOrderItemText">@item.MenuItem.Name x@(item.Amount)</span>
								</div>
								<div class="KitchenOrderCommentLine">
									@{
										string comment;

										if (item.Comment == "") comment = " - reg"; // add comment to each order item, if there is none, add default one
										else comment = $"- {item.Comment}";

										<div class="KitchenItemCommentText">@comment</div>
									}

									@{
										switch (item.ItemStatus)
										{
											case OrderItemStatus.NewItem:
												{
													<a class="KitchenOrdrItemActionButton KitchenOrdrButtonTake" href="/Kitchen/TakeOrder/@order.OrderId/@item.Id">
														<div class="KitchenButtonText">T</div>
													</a>
													break;
												}

											case OrderItemStatus.Preparing:
												{
													<a class="KitchenOrdrItemActionButton KitchenOrdrButtonFinish" href="/Kitchen/FinishOrder/@order.OrderId/@item.Id">
														<div class="KitchenButtonText">F</div>
													</a>
													break;
												}
										}
									}
								</div>							
							</div>

							if(item != order.Items[order.Items.Count - 1]) // if this item is not the last, add item break;
							{
								<div class="KitchenOrderItemBreak"></div>
							}
						}
					}
				</div>
			}
		}
	}
</div>