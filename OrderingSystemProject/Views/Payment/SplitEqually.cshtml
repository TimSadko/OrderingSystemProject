@model SplitEquallyViewModel
@{
    var euroCulture = System.Globalization.CultureInfo.CreateSpecificCulture("nl-NL");
}

<partial name="_ErrorMessage" />
<partial name="_SuccessMessage" />

<h2>Split the Bill Equally</h2>
<p><strong>Total:</strong> @Model.Bill.OrderTotal.ToString("C", euroCulture)</p>

<form asp-action="UpdateNumberOfPeople" asp-controller="Payment" method="post">
    @Html.HiddenFor(m => m.Bill.BillId)
    <div class="form-group">
        <label>Number of People:</label>
        <input type="number" min="1" step="1" value="@Model.NumberOfPeople" asp-for="NumberOfPeople" class="form-control" />
        <button type="submit" class="btn btn-secondary mt-2">Update Number of People</button>
    </div>
</form>

<form asp-action="SplitEqually" asp-controller="Payment" method="post">
    @Html.HiddenFor(m => m.Bill.BillId)
    <input type="hidden" asp-for="NumberOfPeople" />
    @for (int i = 0; i < Model.NumberOfPeople; i++)
    {
        <div class="card my-3 p-3">
            <h4>Payment @((i + 1))</h4>
            
            <div class="form-group">
                <label for="paymentAmount-@i">Amount to Pay (€)</label>
                <input type="number" name="Payments[@i].PaymentAmount" id="paymentAmount-@i" step="0.01" min="@(Math.Round(Model.Bill.OrderTotal / Model.NumberOfPeople,2))" class="form-control" value="@Model.Payments[i].PaymentAmount" />
            </div>
            <input type="hidden" name="Payments[@i].BillId" value="@Model.Bill.BillId" />

            <div class="glass-radio-group payment">
                <input type="radio" id="pay-cash-@i" name="Payments[@i].PaymentType" value="Cash" onclick="handlePaymentSelection(this)" checked />
                <label for="pay-cash-@i">Cash</label>

                <input type="radio" id="pay-credit-@i" name="Payments[@i].PaymentType" value="CreditCard" onclick="handlePaymentSelection(this)" />
                <label for="pay-credit-@i">Credit Card</label>

                <input type="radio" id="pay-debit-@i" name="Payments[@i].PaymentType" value="DebitCard" onclick="handlePaymentSelection(this)" />
                <label for="pay-debit-@i">Debit Card</label>

                <div class="glass-glider"></div>
            </div>

            <div class="form-group">
                <label>Feedback</label>
                <textarea name="Payments[@i].Feedback" class="form-control"></textarea>
            </div>
        </div>
    }

    <button type="submit" class="btn btn-primary">Split and Pay</button>
</form>

<a asp-action="Pay" asp-route-id="@Model.Bill.BillId" class="btn btn-outline-primary mt-3">Back to Pay View</a>

<script>
    function updateSplitPreview() {
        const total = @Model.Bill.OrderTotal;
        const people = document.querySelector('input[name="NumberOfPeople"]').value;
        const tip = parseFloat(document.querySelector('input[name="TotalTip"]').value || 0);

        if (people > 0) {
            const totalPerPerson = (total + tip) / people;
            document.getElementById("perPersonDisplay").innerText = `Each person pays: €${totalPerPerson.toFixed(2)}`;
        }
    }

    const orderTotal = parseFloat("@Model.Bill.OrderTotal");

    function handleTipSelection(radio) {
        const selectedValue = radio.value;

        const i = radio.id.split("-").pop(); // get the person index
        const container = document.getElementById(`customTipContainer-${i}`);
        const input = document.getElementById(`customTipValue-${i}`);
        const glider = radio.closest('.glass-radio-group').querySelector('.glass-glider');

        // Update glider position based on selected radio
        const radios = Array.from(radio.closest('.glass-radio-group').querySelectorAll('input[type="radio"]'));
        const index = radios.indexOf(radio);
        if (glider && index !== -1) {
            glider.style.transform = `translateX(${index * 100}%)`;
        }

        // Show/hide custom tip input
        if (selectedValue === "custom") {
            container.classList.remove("hidden");
            applyCustomTip(i); // In case there's already a value typed
        } else {
            container.classList.add("hidden");
            input.value = ""; // Clear the input when switching away
        }
    }

    function handlePaymentSelection(radio) {
        const group = radio.closest('.glass-radio-group');
        const radios = Array.from(group.querySelectorAll('input[type="radio"]'));
        const glider = group.querySelector('.glass-glider');
        const index = radios.indexOf(radio);

        if (glider && index !== -1) {
            glider.style.transform = `translateX(${index * 100}%)`;
        }
    }

    function applyCustomTip(personIndex) {
        const input = document.getElementById(`customTipValue-${personIndex}`);
        const customTip = parseFloat(input.value) || 0;
    }
    
    document.addEventListener("DOMContentLoaded", () => {
        updateSplitPreview();
        
        const totalPeople = @Model.NumberOfPeople;

        for (let i = 0; i < totalPeople; i++) {
            const selectedTipRadio = document.querySelector(`input[name="Payments[${i}].SelectedTipOption"]:checked`);
            if (selectedTipRadio) {
                handleTipSelection(selectedTipRadio);
            }

            const selectedPaymentRadio = document.querySelector(`input[name="Payments[${i}].PaymentType"]:checked`);
            if (selectedPaymentRadio) {
                handlePaymentSelection(selectedPaymentRadio);
            }
        }
    });
</script>